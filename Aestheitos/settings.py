"""
Django settings for Aestheitos project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
import sys
from dotenv import load_dotenv


load_dotenv()  # take environment variables from .env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "IDON'TWANNASETTHECOOKIEANYMORE")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "corsheaders",
    "learn",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "drf_spectacular",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "django_apscheduler",
    "storages",
]

CORS_ORIGIN_WHITELIST = [
    "http://localhost:5173",
    "https://ambitious-stone-00aad4900.4.azurestaticapps.net",
    "https://aestheitos.vercel.app",
]
CORS_EXPOSE_HEADERS = [
    "X-Session-ID",
    "Content-Type",
    "X-CSRFToken",
]
# Add allowed headers explicitly
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "x-session-id",  # Add this
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "https://ambitious-stone-00aad4900.4.azurestaticapps.net",
    "https://aestheitos.vercel.app",
    "https://aestheitos.pro",
]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "https://ambitious-stone-00aad4900.4.azurestaticapps.net",
    "https://aestheitos.vercel.app",
    "https://stingray-app-24qhl.ondigitalocean.app",
    "https://aestheitos.pro",
    "https://api.aestheitos.pro",
]
# CSRF_COOKIE_SECURE = False
# SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SAMESITE = "None"
CSRF_COOKIE_HTTPONLY = False
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = "None"
CORS_ALLOW_CREDENTIALS = True
CSRF_USE_SESSIONS = True


# PROD SETTINGS
# CSRF_COOKIE_SECURE = True
# SESSION_COOKIE_SECURE = True
# SESSION_COOKIE_DOMAIN = ".aestheitos.pro"  # Allows sharing between frontend and API
# CSRF_COOKIE_DOMAIN = '.aestheitos.pro'

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "Aestheitos.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "Aestheitos.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# If you're interested in using PostgreSQL then use this
# Use PostgreSQL for development/production

# Decided to 'TEST' in sqlite3 because I don't know why my test cases are having assertion errors in postgreSQL.
if "test" in sys.argv:
    # Use SQLite for tests
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ.get("POSTGRES_DB", "mydatabase"),
            "USER": os.environ.get("POSTGRES_USER", "jericho1050"),
            "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "secret"),
            "HOST": os.environ.get("POSTGRES_HOST", "localhost"),
            "PORT": os.environ.get("POSTGRES_PORT", "5432"),
        }
    }

# if you're interested in using Sqlite3 then use this
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }


AUTH_USER_MODEL = "learn.User"


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"
# TIME_ZONE = "Asia/Manila"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


STATIC_URL = "/static/"
STATIC_ROOT = os.environ.get("STATIC_ROOT", "/staticfiles")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'
# CRISPY_TEMPLATE_PACK = 'bootstrap5'

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "learn.authentication.HeaderSessionAuthentication",
    ],
}


SPECTACULAR_SETTINGS = {
    "TITLE": "Aestheitos LMS API",
    "DESCRIPTION": "This is the REST API for the Aestheitos Learning Management System. It provides endpoints for managing and accessing courses, lessons, user profiles, and progress tracking in the field of fitness and calisthenics.",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
}


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=4),
}


APSCHEDULER_DATETIME_FORMAT = "N j, Y, g:i a"
APSCHEDULER_RUN_NOW_TIMEOUT = 40


# Local development settings
if DEBUG:
    MEDIA_ROOT = os.path.join(BASE_DIR, "images")
    MEDIA_URL = "/images/"
else:
    # Production settings for DigitalOcean Spaces
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    AWS_ACCESS_KEY_ID = os.environ.get("DO_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.environ.get("DO_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = "aestheitos-media"
    AWS_S3_ENDPOINT_URL = "https://sgp1.digitaloceanspaces.com"
    AWS_S3_CUSTOM_DOMAIN = "aestheitos-media.sgp1.cdn.digitaloceanspaces.com"
    AWS_S3_REGION_NAME = "sgp1"
    AWS_LOCATION = "media"
    AWS_DEFAULT_ACL = "public-read"
    AWS_QUERYSTRING_AUTH = False
    AWS_S3_FILE_OVERWRITE = False
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/"
